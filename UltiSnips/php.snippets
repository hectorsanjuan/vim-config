global !p
def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
    if len(opts) == 1:
        return opts[0]
    return "(" + "|".join(opts) + ")"
endglobal

snippet php "PHP start tag" b
<?php

$0
endsnippet

snippet lic "File license header" b
/*
 * This file is part of $1
 *
 * (c) ${2:`!v g:snips_author`}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
$0
endsnippet

snippet cls "Class declaration" !b
/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`}
 *
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
    public function ${3:__construct}(${4:$options})
    {
        ${5:// code}
    }
}
$0
endsnippet

snippet iface "Interface declaration" !b
/**
 * Interface ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`}
 *
 * @author ${2:`!v g:snips_author`}
 */
interface $1
{
    ${3}
}
$0
endsnippet

snippet fn "Function declaration"
/**
 * ${5:desc}
 **/
${1:public}`!p snip.rv=complete(t[1], ['public', 'protected', 'private'])` $2function ${3:someFunc}(${4})
{
    ${7:// code}
}
endsnippet

snippet @par "@param definition"
@param ${1:string} $${2:parameter} ${3:desc}
endsnippet

snippet @ret "@return definition"
@return ${1:void} ${2:desc}
endsnippet

snippet @thr "@throws definition"
@throws ${1:Exception} ${2:desc}
endsnippet

snippet throw "throw exception" b
throw new ${1:Exception}(${2:message});
endsnippet

snippet try "Try/catch block" b
try {
    $3
} catch (${1:Exception} $${2:ex}) {
    $4
}
$0
endsnippet

snippet forek "foreach key => value"
foreach ($${1:variable} as $${2:key} => $${3:value}){
    ${4:// code...}
}
endsnippet
